full %>%
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
names(full)
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = number),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
sdf <- fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" ))
sdf <- fct_relevel(full$severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" ))
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = sdf, y = n)) +
geom_text(aes(x = sdf, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = sdf, y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5)) + # Position labels in the middle of bars
labs(
title = "Age and weight distribution",
subtitle = "Fictional Ebola outbreak, 2014",
x = "Age in years",
y = "Weight in kilos",
color = "Age")
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5)) + # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Percentages",
y = "Severity of Depression"
#color = "Age"
)
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5)) + # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages"
#color = "Age"
)
full %>%
count(typeof, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = typeof, y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = typeof),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages"
#color = "Age"
)
full %>%
count(typeof, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = typeof, y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = typeof),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages",
group = "Type of SCD"
#color = "Age"
)
full %>%
count(typeof, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = typeof, y = n)) +
# fctlevel will re-arrange the order as specified
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = typeof),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages",
group = "Type of SCD"
#color = "Age"
) +
theme_classic()+                                 # pre-defined theme adjustments
theme(legend.position = "bottom")                   # move legend to bottom
full <- import(here("FULL.xlsx"))
View(full)
full %>%
count(`Type of SCD`, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = `Type of SCD`, y = n)) +
# fctlevel will re-arrange the order as specified
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = `Type of SCD`),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages",
#color = "Age"
) +
theme_classic()+                                 # pre-defined theme adjustments
theme(legend.position = "bottom")                   # move legend to bottom
full %>%
count(`Type of SCD`, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = `Type of SCD`, y = n)) +
# fctlevel will re-arrange the order as specified
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = `Type of SCD`),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages",
#color = "Age"
) +
#theme_classic()+                                 # pre-defined theme adjustments
theme(legend.position = "bottom")                   # move legend to bottom
full %>%
count(`Type of SCD`, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = `Type of SCD`, y = n)) +
# fctlevel will re-arrange the order as specified
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = `Type of SCD`),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Severity of Depression and Type of SCD",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages",
#color = "Age"
) +
#theme_classic()+                                 # pre-defined theme adjustments
theme(legend.position = "bottom")                   # move legend to bottom
full %>%
count(`Type of SCD`, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = `Type of SCD`, y = n)) +
# fctlevel will re-arrange the order as specified
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = `Type of SCD`),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Depression and Type of SCD",
subtitle = " The severity of depression is according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages",
#color = "Age"
) +
#theme_classic()+                                 # pre-defined theme adjustments
theme(legend.position = "bottom")                   # move legend to bottom
### I wanna create an age-sex pyramid
# begin ggplot
ggplot(mapping = aes(x = age, fill = gender)) +
# female histogram
geom_histogram(data = clean_SS %>% filter(gender == "Female"),
breaks = seq(0,85,5),
colour = "white") +
# male histogram (values converted to negative)
geom_histogram(data = clean_SS %>% filter(gender == "Male"),
breaks = seq(0,85,5),
mapping = aes(y = ..count..*(-1)),
colour = "white") +
# flip the X and Y axes
coord_flip() +
# adjust counts-axis scale
scale_y_continuous(limits = c(-20, 40),
breaks = seq(-20,40,10),
labels = abs(seq(-20, 40, 10)))
### I wanna create an age-sex pyramid
# begin ggplot
ggplot(mapping = aes(x = age, fill = gender)) +
# female histogram
geom_histogram(data = full %>% filter(gender == "Female"),
breaks = seq(0,85,5),
colour = "white") +
# male histogram (values converted to negative)
geom_histogram(data = full %>% filter(gender == "Male"),
breaks = seq(0,85,5),
mapping = aes(y = ..count..*(-1)),
colour = "white") +
theme(legend.position = "bottom")   +                # move legend to bottom
# flip the X and Y axes
coord_flip() +
# adjust counts-axis scale
scale_y_continuous(limits = c(-20, 40),
breaks = seq(-20,40,10),
labels = abs(seq(-20, 40, 10)))
### I wanna create an age-sex pyramid
# begin ggplot
ggplot(mapping = aes(x = age, fill = gender)) +
# female histogram
geom_histogram(data = full %>% filter(gender == "Female"),
breaks = seq(0,85,5),
colour = "white") +
# male histogram (values converted to negative)
geom_histogram(data = full %>% filter(gender == "Male"),
breaks = seq(0,85,5),
mapping = aes(y = ..count..*(-1)),
colour = "white") +
theme(legend.position = "bottom")   +                # move legend to bottom
# flip the X and Y axes
coord_flip() +
# adjust counts-axis scale
scale_y_continuous(limits = c(-20, 40),
breaks = seq(-20,40,10),
labels = abs(seq(-20, 40, 10))) +
labs(
title = "Age-Sex Pyramid",
x = "Number of participants",
y = "Age"
#color = "Age"
)
full <- import(here("FULL.xlsx"))
### I wanna create an age-sex pyramid
# begin ggplot
ggplot(mapping = aes(x = age, fill = Gender)) +
# female histogram
geom_histogram(data = full %>% filter(Gender == "Female"),
breaks = seq(0,85,5),
colour = "white") +
# male histogram (values converted to negative)
geom_histogram(data = full %>% filter(Gender == "Male"),
breaks = seq(0,85,5),
mapping = aes(y = ..count..*(-1)),
colour = "white") +
theme(legend.position = "bottom")   +                # move legend to bottom
# flip the X and Y axes
coord_flip() +
# adjust counts-axis scale
scale_y_continuous(limits = c(-20, 40),
breaks = seq(-20,40,10),
labels = abs(seq(-20, 40, 10))) +
labs(
title = "Age-Sex Pyramid",
x = "Age",
y = "Number of participants"
)
# B) Box plot by group
ggplot(data = full, mapping = aes(y = ifyes, x = `Type of SCD`, fill = `Type of SCD`)) +
geom_boxplot()+
theme(legend.position = "bottom")+   # bottom legend
labs(title = "Boxplot based on the type of sickle cell disease",
xlab = "Sickle cell disease",
ylab = "PCV%")
# B) Box plot by group
ggplot(data = full, mapping = aes(y = ifyes, x = `Type of SCD`, fill = `Type of SCD`)) +
geom_boxplot()+
theme(legend.position = "bottom") +   # bottom legend
labs(title = "Boxplot based on the type of sickle cell disease",
x = "Sickle cell disease",
y = "PCV%")
# B) Box plot by group
ggplot(data = full, mapping = aes(y = ifyes, x = `Type of SCD`, fill = `Type of SCD`)) +
geom_boxplot()+
theme(legend.position = "bottom") +   # bottom legend
labs(title = "Steady PCV based on the type of sickle cell disease",
x = "Sickle cell disease",
y = "PCV%")
pacman::p_load(
rio,        # importing data
here,       # relative file pathways
janitor,    # data cleaning and tables
lubridate,  # working with dates
matchmaker, # dictionary-based cleaning
epikit,     # age_categories() function
tidyverse,   # data management and visualization
gtsummary
)
clean_SS <- edit(clean_SS)
pacman::p_load(
rio,          # File import
here,         # File locator
skimr,        # get overview of data
tidyverse,    # data management + ggplot2 graphics,
gtsummary,    # summary statistics and tests
rstatix,      # statistics
corrr,        # correlation analayis for numeric variables
janitor,      # adding totals and percents to tables
flextable     # converting tables to HTML
)
SS <- import(here("Dr Ogunnaike excel sheet.xlsx"))
###########################
clean_SS <- SS %>%
# remove column
select(-c(eduuse,edulogis,VAR00005,
VAR00006, VAR00007, VAR00008, VAR00010, VAR00011, overall)) %>%
# de-duplicate
#distinct() %>%
mutate(
VAR00001 = recode(VAR00001, "0" = "10-19years", "1" = "20-29years", "2" = "30-39years", "3" = "40-49years",
"4" = "50-59years", "5" = "60-69years"),
gender = recode(gender, "1" = "Male", "2" = "Female"),
ethnicity = recode(ethnicity, "1" = "Yoruba", "2" = "Ibo", "3" = "Hausa", "4" = "Others"),
religion = recode(religion, "1" = "Christianity", "2" = "Islam", "3" = "Traditionalist", "4" = "Others"),
education = recode(education, "1" = "Primary", "2" = "Secondary", "3" = "Tertiary"),
eduoffather = recode(eduoffather, "1" = "Primary", "2" = "Secondary", "3" = "Tertiary"),
eduofmother = recode(eduofmother, "1" = "Primary", "2" = "Secondary", "3" = "Tertiary"),
marital = recode(marital, "1" = "Single", "2" = "Married",  "3" = "Separated", "4" = "Widowed"),
familytype = recode(familytype, "1" = "Monogamous", "2" = "Polygamous"),
source = recode(source, "1" = "self", "2" = "HMO", "3" = "LSHS", "4" = "NHIS"),
typeof = recode(typeof, "1" = "HbSS", "2" = "HbSC", "3" = "HbSB", "4" = "Others"),
doyou = recode(doyou, "1" = "Yes", "2" = "No"),
presence = recode(presence, "1" = "Yes", "2" = "No"),
presence_A = recode(presence_A, "1" = "Yes", "2" = "No")
)
clean_SS <- edit(clean_SS)
full <- import(here("FULL.xlsx"))
names(full)
#### I want to create wide .docx table of the descripitve of MCS and PCS grouped by depression
FULL <- full %>%
group_by(Depression) %>%
rstatix::get_summary_stats(MCS2, PCS2, type = "common")
FULL  <- flextable(FULL) %>%
save_as_docx(FULL, path = " depression VS QOL.docx")
#### I want to create a kruskal wallis table of MCS and Depression
MCSDEP <- full %>%
select(MCS2, Depression) %>%                       # keep variables of interest
tbl_summary(                                         # produce summary table
statistic = MCS2 ~ "{median} ({p25}, {p75})", # specify what statistic to show (default, so could remove)
by = Depression) %>%                                  # specify the grouping variable
add_p(MCS2 ~ "kruskal.test")                    # specify what test to perform
MCSDEP <- as.data.frame(MCSDEP)
MCSDEP  <- flextable(MCSDEP) %>%
save_as_docx(MCSDEP, path = " depression VS MCS.docx")
PCSDEP <- full %>%
select(PCS2, Depression) %>%                       # keep variables of interest
tbl_summary(                                         # produce summary table
statistic = PCS2 ~ "{median} ({p25}, {p75})", # specify what statistic to show (default, so could remove)
by = Depression) %>%                                  # specify the grouping variable
add_p(PCS2 ~ "kruskal.test")                    # specify what test to perform
PCSDEP <- as.data.frame(PCSDEP)
PCSDEP  <- flextable(PCSDEP) %>%
save_as_docx(PCSDEP, path = " depression VS PCS.docx")
full %>%
count(typeof, Depression) %>%
group_by(Depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = Depression, fill = typeof, y = n)) +
geom_text(aes(x = Depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = typeof),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
full %>%
count(typeof, Depression) %>%
group_by(Depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = Depression, fill = typeof, y = n)) +
geom_text(aes(x = Depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = typeof),
position = position_stack(vjust = 0.5))  # Position labels in the middle of bars
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5)) + # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "frequency"
#color = "Age"
)
pacman::p_load(
rio,          # File import
here,         # File locator
skimr,        # get overview of data
tidyverse,    # data management + ggplot2 graphics,
gtsummary,    # summary statistics and tests
forcats,
rstatix,      # statistics
corrr,        # correlation analayis for numeric variables
janitor,      # adding totals and percents to tables
flextable     # converting tables to HTML
)
full <- import(here("FULL.xlsx"))
full %>%
count(`Type of SCD`, severity_of_depression) %>%
group_by(severity_of_depression) %>%  # Group by outcome to calculate percentages within each outcome
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), fill = `Type of SCD`, y = n)) +
# fctlevel will re-arrange the order as specified
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 1), "%"),  # Add percentage labels
y = n, group = `Type of SCD`),
position = position_stack(vjust = 0.5)) +  # Position labels in the middle of bars
labs(
title = "Depression and Type of SCD",
subtitle = " The severity of depression is according to the PHQ-9 classification",
x = "Severity of Depression",
y = "Percentages",
#color = "Age"
) +
#theme_classic()+                                 # pre-defined theme adjustments
theme(legend.position = "bottom")                   # move legend to bottom
full %>%
count(severity_of_depression) %>%
mutate(pct = n / sum(n) * 100) %>%  # Calculate percentage
ggplot() +
geom_col(mapping = aes(x = fct_relevel(severity_of_depression, c("None", "Mild", "Moderate", "Moderately severe", "Severe" )), y = n)) +
geom_text(aes(x = severity_of_depression, label = paste0(round(pct, 2), "%"),  # Add percentage labels
y = n),
position = position_stack(vjust = 0.5)) + # Position labels in the middle of bars
labs(
title = "Severity of Depression",
subtitle = "severity of depression according to the PHQ-9 classification",
x = "Severity of Depression",
y = "frequency"
#color = "Age"
)
pacman::p_load(
rio,          # File import
here,         # File locator
skimr,        # get overview of data
tidyverse,    # data management + ggplot2 graphics,
gtsummary,    # summary statistics and tests
forcats,
rstatix,      # statistics
corrr,        # correlation analayis for numeric variables
janitor,      # adding totals and percents to tables
flextable     # converting tables to HTML
)
full <- import(here("FULL.xlsx"))
skim(full)
